{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This service provides sends aggregate and tracker data to DHIS2 from third-party systems",
        "title": "DHIS2 Gateway Service",
        "contact": {
            "name": "API Support",
            "url": "http://www.hispuganda.org",
            "email": "ssekiwere@hispuganda.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.1"
    },
    "host": "dhis2gw.hispuganda.org",
    "basePath": "/api/v2",
    "paths": {
        "/aggregate": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "Accepts a JSON payload for an aggregate DHIS2 submission. Requires `Authorization: Token \u003ctoken\u003e` header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "aggregate"
                ],
                "summary": "Submit aggregate data request",
                "parameters": [
                    {
                        "description": "Aggregate submission payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AggregateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AggregateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or schema validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server-side error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logs": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "Returns a paginated list of job logs with optional filters like status, task ID, job ID, and submission date range.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get job logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task id",
                        "name": "task_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by job id",
                        "name": "job_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by exact submitted_at (RFC3339)",
                        "name": "submitted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Submitted after (RFC3339)",
                        "name": "submitted_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Submitted before (RFC3339)",
                        "name": "submitted_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default 20)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.JobLogPaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server-side error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logs/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "Get a specific job log entry by its database ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get job log by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job log entry",
                        "schema": {
                            "$ref": "#/definitions/joblog.JobLogSwagger"
                        }
                    },
                    "404": {
                        "description": "Log not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server-side error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Returns a paginated list of users, with optional filters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by UID",
                        "name": "uid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by admin user status",
                        "name": "is_admin",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default 20)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedUserResponse"
                        }
                    },
                    "500": {
                        "description": "Server-side error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "Registers a new user with username, password, and profile info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User registration input",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/getToken": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "If the user has an active token, it is returned; otherwise a new one is created. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Generate or return a user token",
                "responses": {
                    "200": {
                        "description": "Returned if an active token already exists",
                        "schema": {
                            "$ref": "#/definitions/models.UserTokenResponse"
                        }
                    },
                    "201": {
                        "description": "Returned if a new token was generated",
                        "schema": {
                            "$ref": "#/definitions/models.UserTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or missing user context",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/internal error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/refreshToken": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "Deactivates the current active token (if any) and generates a new one. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Refresh user's API token",
                "responses": {
                    "200": {
                        "description": "New token generated",
                        "schema": {
                            "$ref": "#/definitions/models.UserTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or missing user context",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No active token found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/internal error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{uid}": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "TokenAuth": []
                    }
                ],
                "description": "Updates an existing user's profile using their UID. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server/internal error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.JobLogPaginatedResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/joblog.JobLogSwagger"
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "controllers.PaginatedUserResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "joblog.JobLogSwagger": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "type": "integer",
                    "example": 123
                },
                "last_attempt_at": {
                    "type": "string",
                    "example": "2024-06-24T09:00:00Z"
                },
                "payload": {
                    "type": "object"
                },
                "response": {
                    "type": "string",
                    "example": "OK"
                },
                "retry_count": {
                    "type": "integer",
                    "example": 0
                },
                "status": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "submitted_at": {
                    "type": "string",
                    "example": "2024-06-24T08:00:00Z"
                },
                "task_id": {
                    "type": "string",
                    "example": "abc-123"
                }
            }
        },
        "models.AggregateRequest": {
            "type": "object",
            "properties": {
                "dataSet": {
                    "type": "string",
                    "example": "pKxY5g6WgDm"
                },
                "dataValues": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "orgUnit": {
                    "type": "string",
                    "example": "g8xY5g6WgXl"
                },
                "orgUnitName": {
                    "type": "string",
                    "example": "Health Center 1"
                },
                "period": {
                    "type": "string",
                    "example": "202401"
                }
            }
        },
        "models.AggregateResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Aggregate request queued for processing"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "submission_id": {
                    "type": "integer",
                    "example": 1034
                },
                "task_id": {
                    "type": "string",
                    "example": "c5265e8f-2f15-4090-b25e-303d748adfce"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "detail": {},
                "error": {
                    "type": "string",
                    "example": "Invalid JSON"
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User updated successfully"
                }
            }
        },
        "models.UpdateUserInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "telephone": {
                    "type": "string",
                    "example": "+256700000000"
                },
                "username": {
                    "type": "string",
                    "example": "jdoe"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_admin_user": {
                    "type": "boolean"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "telephone": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserCreateResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User created successfully!"
                },
                "uid": {
                    "type": "string",
                    "example": "aS1kT9rLQ9f"
                }
            }
        },
        "models.UserInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "isAdminUser": {
                    "type": "boolean",
                    "example": false
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "example": "s3cretP@ss"
                },
                "telephone": {
                    "type": "string",
                    "example": "+256700000001"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "models.UserTokenResponse": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string",
                    "example": "2026-06-20T10:00:00Z"
                },
                "message": {
                    "type": "string",
                    "example": "Token created successfully"
                },
                "token": {
                    "type": "string",
                    "example": "abc123xyzTOKEN"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "security": [
        {
            "basicAuth": []
        }
    ]
}