basePath: /api/v2
definitions:
  controllers.CSVMappingsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/models.Dhis2Mapping'
        type: array
      total:
        example: 100
        type: integer
    type: object
  controllers.ExcelImportResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/models.Dhis2Mapping'
        type: array
      total:
        example: 100
        type: integer
    type: object
  controllers.JobLogPaginatedResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/joblog.JobLogSwagger'
        type: array
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  controllers.PaginatedUserResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/models.User'
        type: array
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  joblog.JobLogSwagger:
    properties:
      errors:
        example: ""
        type: string
      id:
        example: 123
        type: integer
      last_attempt_at:
        example: "2024-06-24T09:00:00Z"
        type: string
      payload:
        type: object
      response:
        example: OK
        type: string
      retry_count:
        example: 0
        type: integer
      status:
        example: SUCCESS
        type: string
      submitted_at:
        example: "2024-06-24T08:00:00Z"
        type: string
      task_id:
        example: abc-123
        type: string
    type: object
  models.AggregateRequest:
    properties:
      dataSet:
        example: pKxY5g6WgDm
        type: string
      dataValues:
        additionalProperties: {}
        type: object
      orgUnit:
        example: g8xY5g6WgXl
        type: string
      orgUnitName:
        example: Health Center 1
        type: string
      period:
        example: "202401"
        type: string
    type: object
  models.AggregateResponse:
    properties:
      message:
        example: Aggregate request queued for processing
        type: string
      payload:
        additionalProperties: true
        type: object
      submission_id:
        example: 1034
        type: integer
      task_id:
        example: c5265e8f-2f15-4090-b25e-303d748adfce
        type: string
    type: object
  models.Dhis2Mapping:
    properties:
      categoryOptionCombo:
        type: string
      code:
        type: string
      created:
        type: string
      dataElement:
        type: string
      dataSet:
        type: string
      description:
        type: string
      dhis2Name:
        type: string
      id:
        type: integer
      name:
        type: string
      uid:
        type: string
      updated:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      detail: {}
      error:
        example: Invalid JSON
        type: string
    type: object
  models.SuccessResponse:
    properties:
      message:
        example: User updated successfully
        type: string
    type: object
  models.UpdateUserInput:
    properties:
      email:
        example: john.doe@example.com
        type: string
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
      telephone:
        example: "+256700000000"
        type: string
      username:
        example: jdoe
        type: string
    type: object
  models.User:
    properties:
      created:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_admin_user:
        type: boolean
      lastname:
        type: string
      password:
        type: string
      telephone:
        type: string
      uid:
        type: string
      updated:
        type: string
      username:
        type: string
    type: object
  models.UserCreateResponse:
    properties:
      message:
        example: User created successfully!
        type: string
      uid:
        example: aS1kT9rLQ9f
        type: string
    type: object
  models.UserInput:
    properties:
      email:
        example: john@example.com
        type: string
      firstName:
        example: John
        type: string
      isActive:
        example: true
        type: boolean
      isAdminUser:
        example: false
        type: boolean
      lastName:
        example: Doe
        type: string
      password:
        example: s3cretP@ss
        type: string
      telephone:
        example: "+256700000001"
        type: string
      username:
        example: admin
        type: string
    type: object
  models.UserTokenResponse:
    properties:
      expires:
        example: "2026-06-20T10:00:00Z"
        type: string
      message:
        example: Token created successfully
        type: string
      token:
        example: abc123xyzTOKEN
        type: string
    type: object
host: dhis2gw.hispuganda.org
info:
  contact:
    email: ssekiwere@hispuganda.org
    name: API Support
    url: http://www.hispuganda.org
  description: This service provides sends aggregate and tracker data to DHIS2 from
    third-party systems
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: DHIS2 Gateway Service
  version: 1.0.1
paths:
  /aggregate:
    post:
      consumes:
      - application/json
      description: 'Accepts a JSON payload for an aggregate DHIS2 submission. Requires
        `Authorization: Token <token>` header.'
      parameters:
      - description: Aggregate submission payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AggregateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AggregateResponse'
        "400":
          description: Invalid JSON or schema validation failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Submit aggregate data request
      tags:
      - aggregate
  /logs:
    get:
      description: Returns a paginated list of job logs with optional filters like
        status, task ID, job ID, and submission date range.
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by task id
        in: query
        name: task_id
        type: string
      - description: Filter by job id
        in: query
        name: job_id
        type: integer
      - description: Filter by exact submitted_at (RFC3339)
        in: query
        name: submitted_at
        type: string
      - description: Submitted after (RFC3339)
        in: query
        name: submitted_from
        type: string
      - description: Submitted before (RFC3339)
        in: query
        name: submitted_to
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default 20)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.JobLogPaginatedResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Get job logs
      tags:
      - logs
  /logs/{id}:
    get:
      description: Get a specific job log entry by its database ID.
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job log entry
          schema:
            $ref: '#/definitions/joblog.JobLogSwagger'
        "404":
          description: Log not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Get job log by ID
      tags:
      - logs
  /mappings:
    get:
      description: Returns a list of DHIS2 mappings
      parameters:
      - description: Filter by code
        in: query
        name: code
        type: string
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by data set
        in: query
        name: dataSet
        type: string
      - description: Filter by data element
        in: query
        name: dataElement
        type: string
      - description: Filter by DHIS2 name
        in: query
        name: dhis2Name
        type: string
      - description: Filter by category option combo
        in: query
        name: categoryOptionCombo
        type: string
      - description: Filter by UID
        in: query
        name: uid
        type: string
      - description: Filter by created date (RFC3339 format)
        in: query
        name: created
        type: string
      - description: Filter by updated date (RFC3339 format)
        in: query
        name: updated
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default 10)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Dhis2Mapping'
            type: array
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Get mappings
      tags:
      - mappings
  /mappings/import/csv:
    post:
      consumes:
      - multipart/form-data
      description: Imports DHIS2 mappings from a CSV file
      parameters:
      - description: CSV file containing DHIS2 mappings
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ExcelImportResponse'
        "400":
          description: Invalid file format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Import DHIS2 mappings from CSV
      tags:
      - mappings
  /mappings/import/excel:
    post:
      consumes:
      - multipart/form-data
      description: Imports DHIS2 mappings from an Excel file
      parameters:
      - description: Excel file containing DHIS2 mappings
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CSVMappingsResponse'
        "400":
          description: Invalid file format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Import DHIS2 mappings from Excel
      tags:
      - mappings
  /users:
    get:
      description: Returns a paginated list of users, with optional filters.
      parameters:
      - description: Filter by UID
        in: query
        name: uid
        type: string
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by admin user status
        in: query
        name: is_admin
        type: boolean
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default 20)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PaginatedUserResponse'
        "500":
          description: Server-side error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Registers a new user with username, password, and profile info
      parameters:
      - description: User registration input
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{uid}:
    put:
      consumes:
      - application/json
      description: Updates an existing user's profile using their UID. Requires authentication.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server/internal error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Update user details
      tags:
      - users
  /users/getToken:
    post:
      description: If the user has an active token, it is returned; otherwise a new
        one is created. Requires authentication.
      produces:
      - application/json
      responses:
        "200":
          description: Returned if an active token already exists
          schema:
            $ref: '#/definitions/models.UserTokenResponse'
        "201":
          description: Returned if a new token was generated
          schema:
            $ref: '#/definitions/models.UserTokenResponse'
        "401":
          description: Unauthorized or missing user context
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server/internal error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Generate or return a user token
      tags:
      - users
  /users/refreshToken:
    post:
      description: Deactivates the current active token (if any) and generates a new
        one. Requires authentication.
      produces:
      - application/json
      responses:
        "200":
          description: New token generated
          schema:
            $ref: '#/definitions/models.UserTokenResponse'
        "401":
          description: Unauthorized or missing user context
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No active token found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server/internal error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      - TokenAuth: []
      summary: Refresh user's API token
      tags:
      - users
schemes:
- http
- https
security:
- basicAuth: []
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
